{"version":3,"file":"static/js/List.0bc6b575.chunk.js","mappings":"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","sources":["pages/List/ToolBar.tsx","pages/List/List.tsx","pages/List/components/Card.tsx","pages/List/components/SearchBar.tsx","pages/List/components/Buttons.tsx","pages/List/components/Filter.tsx","pages/List/components/Category.tsx","pages/List/components/Indicator.tsx","pages/List/components/SelectFilter.tsx","pages/List/components/SelectGroup.tsx"],"sourcesContent":["import { ChangeEvent } from 'react';\nimport clsx from 'clsx';\n\nimport { Icon } from '@/components';\nimport { Filter } from './List';\nimport { SelectFilter, SelectGroup } from './components';\n\ntype Props = {\n  filter: Filter;\n  handleChickChange: (\n    key: 'berries' | 'ingredients' | 'skills' | 'specialties' | 'locations',\n  ) => (event: ChangeEvent<HTMLInputElement>) => void;\n  handleGroupByChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  removeFilter: (key: 'berries' | 'ingredients' | 'skills' | 'specialties', name: string) => void;\n};\n\nexport function ToolBar({ filter, handleChickChange, handleGroupByChange, removeFilter }: Props) {\n  const hasFilter = [filter.berries, filter.ingredients, filter.skills, filter.specialties].some(\n    (set) => set.size > 0,\n  );\n\n  const filterList = [\n    { set: filter.berries, name: '樹果', key: 'berries' },\n    { set: filter.ingredients, name: '食材', key: 'ingredients' },\n    { set: filter.specialties, name: '專長', key: 'specialties' },\n    { set: filter.skills, name: '主技能', key: 'skills' },\n  ];\n\n  return (\n    <>\n      <SelectFilter filter={filter} handleChickChange={handleChickChange} />\n      <SelectGroup filter={filter} handleGroupByChange={handleGroupByChange} />\n\n      <div\n        className={clsx(\n          'mb-2 flex flex-wrap gap-2',\n          'transition-all duration-300',\n          hasFilter && filter.displayGroupBy === false\n            ? 'mb-4 h-full scale-y-100 opacity-100'\n            : 'h-0 scale-y-0 opacity-0',\n        )}\n      >\n        {!filter.displayFilter && (\n          <>\n            <span className='py-1 pl-2'>篩選項目：</span>\n            {filterList\n              .filter(({ set }) => set.size > 0)\n              .map(({ name, set, key }) => [...set].map((itemKey) => [name, itemKey, key]))\n              .flat()\n              .map((row) => {\n                const [name, itemKey, filterKey] = row;\n                const key = `${name}-${itemKey}`;\n                return (\n                  <span\n                    key={key}\n                    className={clsx(\n                      'flex items-center gap-x-2',\n                      'rounded-xl bg-amber-100 px-2 py-1 shadow-list-items',\n                    )}\n                  >\n                    {itemKey}\n                    <Icon.Close\n                      className='h-3 w-3'\n                      onClick={() => {\n                        removeFilter(\n                          filterKey as 'berries' | 'ingredients' | 'skills' | 'specialties',\n                          itemKey,\n                        );\n                      }}\n                    />\n                  </span>\n                );\n              })}\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n","import { useState, ChangeEvent, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport clsx from 'clsx';\n\nimport { Pokemon, SleepTypeBgClass } from '@/types';\nimport { SubTitleSlide, TitleSlide } from '@/components';\nimport { pmList } from '@/data';\n\nimport { Card, SearchBar, Filter, Category, Indicator } from './components';\nimport { ToolBar } from './ToolBar';\n\nexport type Filter = {\n  keyword: string;\n  berries: Set<string>;\n  ingredients: Set<string>;\n  skills: Set<string>;\n  specialties: Set<string>;\n  locations: Set<string>;\n  displayFilter: boolean;\n  groupBy:\n    | keyof Pick<Pokemon, 'sleep_type' | 'berry' | 'ingredients' | 'type' | 'specialty' | 'skill'>\n    | null;\n  displayGroupBy: boolean;\n};\n\nfunction List() {\n  const [filter, setFilter] = useState<Filter>({\n    keyword: '',\n    berries: new Set<string>(),\n    ingredients: new Set<string>(),\n    skills: new Set<string>(),\n    specialties: new Set<string>(),\n    locations: new Set<string>(),\n    displayFilter: false,\n    groupBy: null,\n    displayGroupBy: false,\n  });\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    setFilter((prevSearch) => ({\n      ...prevSearch,\n      keyword: value,\n    }));\n  };\n\n  const handleChickChange =\n    (key: 'berries' | 'ingredients' | 'skills' | 'specialties' | 'locations') =>\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const { name, checked } = event.target;\n\n      setFilter((prevSearch) => {\n        if (checked) {\n          prevSearch[key].add(name);\n        } else {\n          prevSearch[key].delete(name);\n        }\n\n        return {\n          ...prevSearch,\n          [key]: prevSearch[key],\n        };\n      });\n    };\n\n  const removeFilter = (\n    key: 'berries' | 'ingredients' | 'skills' | 'specialties',\n    name: string,\n  ) => {\n    setFilter((prevSearch) => {\n      prevSearch[key].delete(name);\n\n      return {\n        ...prevSearch,\n        [key]: prevSearch[key],\n      };\n    });\n  };\n\n  const handleGroupByChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name } = event.target;\n\n    setFilter((prevSearch) => {\n      return {\n        ...prevSearch,\n        groupBy: name !== 'none' ? (name as Extract<Filter['groupBy'], keyof Pokemon>) : null,\n      };\n    });\n  };\n\n  const handleCategoryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target;\n\n    setFilter((prevSearch) => {\n      return {\n        ...prevSearch,\n        displayGroupBy: checked,\n      };\n    });\n  };\n\n  const handleFilterChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target;\n\n    setFilter((prevSearch) => {\n      return {\n        ...prevSearch,\n        displayFilter: checked,\n      };\n    });\n  };\n\n  const filterPm = (pm: Pokemon) => {\n    let display = filter.keyword === '';\n\n    if (filter.keyword != '') {\n      display = pm.name.includes(filter.keyword);\n    }\n\n    if (display && filter.berries.size > 0) {\n      display = filter.berries.has(pm.berry);\n    }\n\n    if (display && filter.ingredients.size > 0) {\n      display =\n        pm.ingredients.find((ingredient) => filter.ingredients.has(ingredient)) !== undefined;\n    }\n\n    if (display && filter.skills.size > 0) {\n      display = filter.skills.has(pm.skill);\n    }\n\n    if (display && filter.specialties.size > 0) {\n      display = filter.specialties.has(pm.specialty);\n    }\n\n    if (display && filter.locations.size > 0) {\n      display = Object.keys(pm.locations).some((areaName) => filter.locations.has(areaName));\n    }\n\n    return display;\n  };\n\n  useEffect(() => {\n    document.title = `Sleep Pokédex`;\n  }, []);\n\n  let groupByList: string[] = [''];\n  if (filter.groupBy !== null) {\n    groupByList = pmList\n      .map((pm: Pokemon) => pm[filter.groupBy as Extract<Filter['groupBy'], keyof Pokemon>])\n      .flat();\n    groupByList = [...new Set(groupByList)];\n  }\n\n  const hasFilter = [filter.berries, filter.ingredients, filter.skills, filter.specialties].some(\n    (set) => set.size > 0,\n  );\n\n  return (\n    <div className='flex flex-col'>\n      <div className='flex justify-end py-3'>\n        <div className='flex w-full items-center gap-x-3 md:w-3/5 lg:w-1/3'>\n          <SearchBar value={filter.keyword} onChange={handleInputChange} />\n          <div className='relative'>\n            <Filter checked={filter.displayFilter} onChange={handleFilterChange} />\n            {hasFilter && <Indicator />}\n          </div>\n          <div className='relative'>\n            <Category checked={filter.displayGroupBy} onChange={handleCategoryChange} />\n            {filter.groupBy !== null && <Indicator />}\n          </div>\n        </div>\n      </div>\n\n      <ToolBar\n        filter={filter}\n        handleChickChange={handleChickChange}\n        handleGroupByChange={handleGroupByChange}\n        removeFilter={removeFilter}\n      />\n\n      <TitleSlide title='清單' />\n      <div className='mt-4 space-y-8'>\n        {groupByList.map((groupBy: string) => {\n          return (\n            <div key={groupBy} className='space-y-2'>\n              {groupBy !== '' && <SubTitleSlide title={groupBy} />}\n              <ul\n                className={clsx(\n                  'grid grid-cols-list-mobile justify-between justify-items-center gap-y-4',\n                  'md:mx-0 md:grid-cols-list md:gap-x-4',\n                  'h-full',\n                )}\n              >\n                {pmList\n                  .filter((pm: Pokemon) => {\n                    if (filter.groupBy === null) {\n                      return true;\n                    } else if (Array.isArray(pm[filter.groupBy])) {\n                      return pm[filter.groupBy].includes(groupBy);\n                    }\n                    return pm[filter.groupBy] === groupBy;\n                  })\n                  .filter(filterPm)\n                  .map((pm: Pokemon) => (\n                    <li\n                      className={clsx(\n                        'relative w-28 md:w-32',\n                        'rounded-xl text-center',\n                        'transition-all duration-300',\n                        'shadow-list-items hover:shadow-list-items--hover',\n                        'hover:translate-x-[-0.2rem] hover:translate-y-[-0.2rem]',\n                        SleepTypeBgClass[pm.sleep_type as keyof typeof SleepTypeBgClass],\n                      )}\n                      key={pm.pid}\n                    >\n                      <Card pm={pm} />\n                      <Link className={'stretchedLink'} to={`/pm/${pm.pid.slice(-3)}`} />\n                    </li>\n                  ))}\n              </ul>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default List;\n","import clsx from 'clsx';\n\nimport { Pokemon, Type, TypeBgClass } from '@/types';\nimport { Icon } from '@/components';\n\nexport function Card({ pm }: { pm: Pokemon }) {\n  return (\n    <div className='flex w-full flex-col items-center gap-1 p-2'>\n      <p className='font-bold'>No. {pm.pid.slice(-3)}</p>\n      <div\n        className={clsx(\n          'relative h-16 w-16 overflow-hidden rounded-full',\n          'outline outline-2 outline-white',\n          TypeBgClass[Type[pm.type as keyof typeof Type] as keyof typeof TypeBgClass],\n        )}\n      >\n        <Icon.Game.Pm pm={pm} />\n      </div>\n      <p className='text-base'>{pm.name}</p>\n      <p className='flex items-center text-xs'>\n        {pm.sleep_type} - {pm.specialty}\n      </p>\n      <p className='flex'>\n        {new Array(pm.berry_quantity).fill(0).map((_, index) => (\n          <span className='relative h-8 w-8' key={index}>\n            <Icon.Game.Berry name={pm.berry} />\n          </span>\n        ))}\n      </p>\n      {pm.ingredients.length > 0 && (\n        <p className='flex'>\n          {pm.ingredients.map((ingredient) => (\n            <span className='relative h-8 w-8' key={ingredient}>\n              <Icon.Game.Ingredient name={ingredient} />\n            </span>\n          ))}\n        </p>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n\nimport { Icon } from '@/components';\n\ntype Props = {\n  value: string;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nexport function SearchBar({ value, onChange }: Props) {\n  return (\n    <>\n      <div className='relative w-full'>\n        <div className='pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3'>\n          <Icon.Search className='h-5 w-5' />\n        </div>\n        <input\n          type='search'\n          className={clsx(\n            'block w-full rounded-lg border border-gray-300',\n            'bg-gray-50 p-2 pl-10 text-sm text-gray-900',\n          )}\n          placeholder='搜尋名稱'\n          value={value}\n          onChange={onChange}\n        />\n      </div>\n    </>\n  );\n}\n","import { ChangeEvent } from 'react';\nimport clsx from 'clsx';\n\nimport { CheckboxItem, CheckboxTextItem } from '@/components';\n\ntype Props = {\n  checkSet: Set<string>;\n  list: string[];\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  Icon?: ({ name }: { name: string }) => JSX.Element;\n};\n\ntype TextProps = {\n  select: string | null;\n  list: { key: string; name: string }[];\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport function Buttons({ list, checkSet, Icon, handleChange }: Props) {\n  return (\n    <div className={clsx('flex w-full flex-wrap justify-items-center gap-x-4 gap-y-3 pb-2 pl-2')}>\n      {list.map((item) => (\n        <CheckboxItem key={item} label={item} checked={checkSet.has(item)} onChange={handleChange}>\n          {Icon && <Icon name={item} />}\n        </CheckboxItem>\n      ))}\n    </div>\n  );\n}\n\nexport function TextButtons({ list, select, handleChange }: TextProps) {\n  return (\n    <div className={clsx('flex w-full flex-wrap gap-4 pb-2 pl-2')}>\n      {list.map((item) => (\n        <CheckboxTextItem\n          key={item.key}\n          label={item}\n          checked={(select === null && item.key === 'none') || select === item.key}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n}\n","import { ChangeEvent } from 'react';\n\nimport { Icon } from '@/components';\n\ntype Props = {\n  checked: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport function Filter({ checked, onChange }: Props) {\n  return (\n    <>\n      <input\n        type='checkbox'\n        name={'filter'}\n        id={'filter'}\n        className='hidden'\n        checked={checked}\n        onChange={onChange}\n      />\n      <label htmlFor={'filter'} className='flex cursor-pointer flex-col items-center'>\n        <Icon.Filter className='h-6 w-6' />\n      </label>\n    </>\n  );\n}\n","import { ChangeEvent } from 'react';\n\nimport { Icon } from '@/components';\n\ntype Props = {\n  checked: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport function Category({ checked, onChange }: Props) {\n  return (\n    <>\n      <input\n        type='checkbox'\n        name={'category'}\n        id={'category'}\n        className='hidden'\n        checked={checked}\n        onChange={onChange}\n      />\n      <label htmlFor={'category'} className='flex cursor-pointer flex-col items-center'>\n        <Icon.Category className='h-6 w-6' />\n      </label>\n    </>\n  );\n}\n","export function Indicator() {\n  return <span className='absolute -top-1 left-4 h-3 w-3 rounded-full bg-custom-green'></span>;\n}\n","import { ChangeEvent } from 'react';\nimport clsx from 'clsx';\n\nimport { Icon, SubTitleSlide } from '@/components';\n\nimport { berries, ingredients, skills, specialties, areas } from '@/data';\n\nimport { Buttons } from './Buttons';\nimport { Filter } from '../List';\n\ntype Props = {\n  filter: Filter;\n  handleChickChange: (\n    key: 'berries' | 'ingredients' | 'skills' | 'specialties' | 'locations',\n  ) => (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport function SelectFilter({ filter, handleChickChange }: Props) {\n  return (\n    <div\n      className={clsx(\n        'origin-top space-y-4 overflow-hidden transition-all duration-300',\n        filter.displayFilter ? 'mb-4 h-full scale-y-100 opacity-100' : 'h-0 scale-y-0 opacity-0',\n      )}\n    >\n      <SubTitleSlide title='篩選：樹果' />\n      <Buttons\n        list={berries.map((berry) => berry.name)}\n        Icon={Icon.Game.Berry}\n        checkSet={filter.berries}\n        handleChange={handleChickChange('berries')}\n      />\n      <SubTitleSlide title='篩選：食材' />\n      <Buttons\n        list={ingredients.map((ingredient) => ingredient.name)}\n        Icon={Icon.Game.Ingredient}\n        checkSet={filter.ingredients}\n        handleChange={handleChickChange('ingredients')}\n      />\n      <SubTitleSlide title='篩選：專長' />\n      <Buttons\n        list={specialties}\n        checkSet={filter.specialties}\n        handleChange={handleChickChange('specialties')}\n      />\n      <SubTitleSlide title='篩選：主技能' />\n      <Buttons list={skills} checkSet={filter.skills} handleChange={handleChickChange('skills')} />\n      <SubTitleSlide title='篩選：區域' />\n      <Buttons\n        list={areas}\n        checkSet={filter.locations}\n        handleChange={handleChickChange('locations')}\n      />\n    </div>\n  );\n}\n","import { ChangeEvent } from 'react';\nimport clsx from 'clsx';\n\nimport { SubTitleSlide } from '@/components';\nimport { Filter } from '../List';\nimport { TextButtons } from './Buttons';\n\ntype Props = {\n  filter: Filter;\n  handleGroupByChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport function SelectGroup({ filter, handleGroupByChange }: Props) {\n  const groupBySelect = [\n    { key: 'none', name: '無' },\n    { key: 'sleep_type', name: '睡眠分類' },\n    { key: 'berry', name: '樹果' },\n    { key: 'ingredients', name: '食材' },\n    { key: 'specialty', name: '專長' },\n    { key: 'skill', name: '主技能' },\n    { key: 'type', name: '屬性' },\n  ];\n\n  return (\n    <div\n      className={clsx(\n        'origin-top space-y-4 overflow-hidden transition-all duration-300',\n        filter.displayGroupBy ? 'mb-2 h-full scale-y-100 opacity-100' : 'h-0 scale-y-0 opacity-0',\n      )}\n    >\n      <SubTitleSlide title='分組方式' />\n      <TextButtons\n        list={groupBySelect}\n        select={filter.groupBy}\n        handleChange={handleGroupByChange}\n      />\n    </div>\n  );\n}\n"],"names":["ToolBar","_ref","filter","handleChickChange","handleGroupByChange","removeFilter","hasFilter","berries","ingredients","skills","specialties","some","set","size","filterList","name","key","_jsxs","_Fragment","children","_jsx","SelectFilter","SelectGroup","className","clsx","displayGroupBy","displayFilter","_ref2","map","_ref3","_toConsumableArray","itemKey","flat","row","_row","_slicedToArray","filterKey","concat","Icon","onClick","_useState","useState","keyword","Set","locations","groupBy","_useState2","setFilter","filterPm","pm","display","includes","has","berry","undefined","find","ingredient","skill","specialty","Object","keys","areaName","useEffect","document","title","groupByList","pmList","SearchBar","value","onChange","event","target","prevSearch","_objectSpread","Filter","checked","Indicator","Category","_event$target","add","delete","_defineProperty","TitleSlide","SubTitleSlide","Array","isArray","SleepTypeBgClass","sleep_type","Card","Link","to","pid","slice","TypeBgClass","Type","type","berry_quantity","fill","_","index","length","placeholder","Buttons","list","checkSet","handleChange","item","CheckboxItem","label","TextButtons","select","CheckboxTextItem","id","htmlFor","areas"],"sourceRoot":""}